<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yie&#39;s Blog</title>
  
  <subtitle>The power of imagination makes us infinite,Welcome to yie&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yieeo.github.io/"/>
  <updated>2018-10-20T01:22:54.526Z</updated>
  <id>https://yieeo.github.io/</id>
  
  <author>
    <name>yie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript this Keyword</title>
    <link href="https://yieeo.github.io/2018/01/19/JavaScript-this/"/>
    <id>https://yieeo.github.io/2018/01/19/JavaScript-this/</id>
    <published>2018-01-19T12:56:14.000Z</published>
    <updated>2018-10-20T01:22:54.526Z</updated>
    
    <content type="html"><![CDATA[<p>在执行上下文的创建阶段,会分别生成变量对象,建立作用域链,确定this指向.this指向是在函数被调用的时候确定的,也就是执行上下文被创建时确定的.一个函数中的this指向可以非常灵活.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 4</span></span><br><span class="line">foo.call(obj); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p><blockquote><p>在函数执行过程中,this一旦被确定,就不可更改.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span> = obj; <span class="comment">// 试图修改this,运行时会报错</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><h4 id="全局对象中的this"><a href="#全局对象中的this" class="headerlink" title="全局对象中的this"></a>全局对象中的this</h4><blockquote><p>全局对象对象中的this,指向它本身.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过this绑定到全局对象</span></span><br><span class="line"><span class="keyword">this</span>.a = <span class="string">'zero'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过声明绑定到变量对象,全局环境中变量对象就是它本身</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'one'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值操作,标识符会隐式绑定到全局对象</span></span><br><span class="line">c = <span class="string">'two'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印日志</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br></pre></td></tr></table></figure><h4 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the first demo</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the second demo</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">  &#125;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the third demo</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">50</span>,</span><br><span class="line">  b: <span class="keyword">this</span>.a + <span class="number">10</span>,</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.b);</span><br><span class="line"><span class="built_in">console</span>.log(obj.foo());</span><br></pre></td></tr></table></figure><p>想要准确确定this指向,找到函数的调用者以及区分它是否独立调用就变得十分关键.在一个函数上下文中,this由调用者提供,由调用函数的方式来决定.如果调用者函数被某一个对象所拥有,那么该函数在调用时,内部的this指向该对象,如果函数独立调用,那么该函数内部的this,则指向undefined.但在非严格模式中,this指向undefined时,它会被自动指向全局对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非严格模式this会自动指向全局,我们在函数内部使用严格模式获得更准确的判断</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">bar(); <span class="comment">// bar是调用者,独立调用</span></span><br><span class="line"><span class="built_in">window</span>.bar(); <span class="comment">// bar是调用者,被window对象所拥有</span></span><br></pre></td></tr></table></figure><p>在上面的例子中,<code>bar()</code>作为独立调用者,按照定义的理解,它内部的this指向<code>undefined</code>.而<code>window.bar()</code>因为fn()方法被window对象所拥有,内部的this指向window对象.</p><p>在<code>the third demo</code>中,对象obj的b属性使用<code>this.a + 10</code>来计算.单独的<code>{}</code>不会形成新的作用域的,因此这里的<code>this.a</code>,由于没有作用域的限制,它仍处于全局作用域中,所以这里的this其实指向的是window对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  a: <span class="number">8</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo.bar()); <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bingo = foo.bar();</span><br><span class="line"><span class="built_in">console</span>.log(bingo()); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p><code>foo.bar()</code>中,bar是调用者,它不是独立调用,被对象foo所拥有,因此它的this指向foo.而<code>bingo()</code>作为调用者,尽管它与foo.bar的引用相同,但是它是独立调用的,因此this指向undefined,在非严格模式中,自动指向window全局对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 稍微修改一下代码</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  a: <span class="number">8</span>,</span><br><span class="line">  bar: bar</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo.bar()); <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次修改</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bingo</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  fn(); <span class="comment">// 独立调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">8</span>,</span><br><span class="line">  bar: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bingo(obj.bar); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h4 id="call-apply显式指定this指向"><a href="#call-apply显式指定this指向" class="headerlink" title="call,apply显式指定this指向"></a>call,apply显式指定this指向</h4><p>JavaScript内部给我们提供两种方法<code>call()</code>和<code>apply()</code>,可以手动设置this的指向.所有函数都具有这两个方法,除了参数略有不同,实现功能完全一样.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// bar并不是obj的方法,通过call方法,将bar内部的this指向obj对象</span></span><br><span class="line"><span class="comment">// 通过this.a访问obj的a属性</span></span><br><span class="line">bar.call(obj); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.c + a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// call()方法和apply()方法的参数:</span></span><br><span class="line"><span class="comment">// 第一个参数为this将要指向的对象</span></span><br><span class="line"><span class="comment">// 第二个参数call()方法是以单个的方式传递,apply()是以数组的方式传递</span></span><br><span class="line">bar.call(obj, <span class="number">10</span>, <span class="number">5</span>); <span class="comment">// 18</span></span><br><span class="line">bar.apply(obj,[<span class="number">10</span>,<span class="number">5</span>]); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将类数组对象转换为数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// 使用call/apply将arguments转为数组,返回数组,arguments不会改变</span></span><br><span class="line">  <span class="keyword">var</span> arg = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arg);</span><br><span class="line">&#125;</span><br><span class="line">example(<span class="string">'zero'</span>,<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改this指向</span></span><br><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">  name: <span class="string">'joker'</span>,</span><br><span class="line">  say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'say hello world'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'knight'</span></span><br><span class="line">&#125;;</span><br><span class="line">bar.say.call(foo);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现继承</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义父类的构造函数</span></span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sex = [<span class="string">'male,female'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子类的构造函数</span></span><br><span class="line"><span class="keyword">var</span> Son = <span class="function"><span class="keyword">function</span> (<span class="params">name, age, hobby</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">  <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype.message = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'name: '</span> + <span class="keyword">this</span>.name + <span class="string">', age: '</span> + <span class="keyword">this</span>.age + <span class="string">', sex: '</span></span><br><span class="line">   + <span class="keyword">this</span>.sex + <span class="string">', hobby: '</span> + <span class="keyword">this</span>.hobby);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Son(<span class="string">'Mike'</span>, <span class="number">18</span>, <span class="string">'swim'</span>).message();</span><br></pre></td></tr></table></figure><p>在Son构造函数中使用call()方法将父级构造函数执行了一次,相当于将Person中的代码在Son构造函数复制了一份,this指向为Son构造函数new出来的实例对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Son = <span class="function"><span class="keyword">function</span> (<span class="params">name, age, hobby</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sex = [<span class="string">'male'</span>,<span class="string">'female'</span>];</span><br><span class="line">  <span class="comment">// Person.call(this, name, age); 相当于执行了上面三行代码</span></span><br><span class="line">  <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在向其它执行上下文的传递中,确保this指向保持不变</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们希望bar()方法被obj对象调用时,this指向obj对象</span></span><br><span class="line"><span class="comment">// 但是匿名函数导致this指向丢失,在匿名函数中this指向了全局</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">8</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(fucntion () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.bar();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改上面代码</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">8</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将this的引用保存起来,赋值给that变量</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    setTimeout(fucntion () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(that.a);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.bar();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装bind()方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">8</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(bind(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;, <span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.bar();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ES5中的bind()方法</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">8</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="构造函数与原型方法上的this"><a href="#构造函数与原型方法上的this" class="headerlink" title="构造函数与原型方法上的this"></a>构造函数与原型方法上的this</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bingo = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">40</span>);</span><br><span class="line">bingo.foo();</span><br></pre></td></tr></table></figure><p>new操作符调用构造函数会经历是个阶段:</p><ul><li>创建一个新对象</li><li>构造函数的this指向这个新对象</li><li>指向构造函数的代码,为这个对象添加属性和方法</li><li>返回新对象</li></ul><p>new操作符调用构造函数,this指向这个新建的对象,然后将新对象返回,被实例对象<code>bingo</code>接收.</p><p>原型方法上的this,根据上面例子函数中的this定义,<code>bingo.foo()</code>中的foo为调用者,它被bingo对象所拥有,foo中的this指向bingo对象.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在执行上下文的创建阶段,会分别生成变量对象,建立作用域链,确定this指向.this指向是在函数被调用的时候确定的,也就是执行上下文被创建时确定的.一个函数中的this指向可以非常灵活.&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The History Of JavaScript</title>
    <link href="https://yieeo.github.io/2017/11/21/JavaScript-history/"/>
    <id>https://yieeo.github.io/2017/11/21/JavaScript-history/</id>
    <published>2017-11-20T23:53:54.000Z</published>
    <updated>2018-10-13T08:20:35.133Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript是由Netscape Communications Corporation(网景公司)程序员Brendan Eich(布兰登.艾克)于1995年创造出来的.Eich只用了10天就开发出了这门脚本语言,最初命名为Mocha.</p><p>1995年9月网景公司在自己的Netscape Navigator浏览器2.0中将这门语言改名为LiveScript.同年12月,网景公司为了将这门语言搭上Java这个编程语言”热词”,随后又改名为JavaScript,但是这门语言与Java没有任何关系.随后JavaScript在浏览器上大获成功,不久后微软公司在自己的Internet Explorer浏览器上推出了JScript,与网景公司进行同台竞争.JScript也是一种JavaScript的实现,这两个的语言版本的共存使得浏览器的语言标准化的缺失.微软在自己的网页技术上加入一些的自己的专属方法,使得网页在不同的浏览器的效果呈现出的不同的效果,程序员写一份代码无法在不同的浏览器上呈现出相同的效果,对于相应的浏览器必须写兼容相应浏览器的代码.语言实现的不同专有化DOM(文档对象模型)的差异,成为了网络上普及JavaScript的阻碍.</p><p>终于在1996年11月,网景公司正式向ECMA(欧洲计算机制造商协会)提交语言标准.1997年6月,ECMA以JavaScript语言为基础制定了ECMAScript标准规范ECMA-262.ECMA标准.流程以循环方式运行 - ECMAScript 2于1998年发布,ECMAScript 3于1999年发布(演变为今天的现代JavaScript).尽管微软开始用JScript语言实现一些提议,但很明显微软不会在Internet Explorer中实现JavaScript.2005年,Eich和Mozilla加入ECMA协助E4X(ECMA-357),与Macromedia(被Adobe收购)合作,他们正致力于在ActionScript 3中实施E4X.这种合作的目标是标准化AS3中的内容并在SpiderMonkey中实现它.因此,Adobe发布了Tamarin,一个源自AVM2的开放课程项目.<br>开源社区和开发者社区也在努力彻底改变JavaScript以及可以用它做些什么,社区的影响达到了顶峰,Jesse James Garrett于2005年发布了一篇论文,其中描述了JavaScript支持的一组技术作为支柱.他创造了“Ajax”这个词.该文引发了大量开发人员倾向于JavaScript以及围绕它的开源社区和库.此外,jQuery,Prototype和Dojo是新发布的库之一.Ajax的优势使JavaScript成为人们关注的焦点,并带来了更多专业的编程注意力.结果是全面的框架和库的增加,以及在Web浏览器之外增加JavaScript的使用,正如服务器端JavaScript平台的激增.</p><p>截至2016年,统计数据显示,约92％的网站使用JavaScript - 其中包括一些全球最大的网站,如Google和Facebook.并且由于JavaScript,使这些网站成为现实的元素是可能的.例如,如果没有JavaScript,我们就不会拥有我们习以为常的实时通知.今天,JavaScript仍然无处不在 - 它是最常用的客户端脚本语言.JavaScript被写入HTML文档,并以许多独特的方式实现与网页的交互.例如,由于JavaScript,我们可以自动安排约会和玩在线游戏.此外,诸如Node.js之类的新开发允许在服务器端使用JavaScript,而诸如HTML5之类的API允许控制用户媒体和其他设备功能.</p><h4 id="JavaScript的组成部分"><a href="#JavaScript的组成部分" class="headerlink" title="JavaScript的组成部分"></a>JavaScript的组成部分</h4><ul><li>ECMAScript,描述了该语言的语法和基本对象</li><li>DOM(文档对象模型),描述了处理网页内容的方法和接口</li><li>BOM(浏览器对象模型),描述了与浏览器进行交互的方法和接口</li></ul><h4 id="JavaScript的基本特点"><a href="#JavaScript的基本特点" class="headerlink" title="JavaScript的基本特点"></a>JavaScript的基本特点</h4><p>JavaScript通常缩写为JS,是一种高级的,解释执行的编程语言.JavaScript是一门基于原型和函数先行的语言,是一门多范式的语言,它支持面向对象编程,命令式编程,以及函数式编程.随着最新的HTML5和CSS3语言标准的推行它还可以用于游戏,桌面和移动应用程序的开发和在服务器端网络环境运行,如Node.js</p><p>JavaScript由ECMA通过ECMAScript实现语言的标准化,已经被世界上绝大多数浏览器所使用,也被世界上的主流浏览器(Chrome,FireFox,Opera,Safari,IE)支持.</p><h4 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h4><p>既然谈到了浏览器,就不得不谈谈现在的主流浏览器的内核,浏览器内核可以分为两部分:渲染引擎和JS引擎.最开始渲染引擎和JS引擎并没有区分的很明确,后来JS引擎(最著名的JS引擎就是Google的V8引擎,V8引擎也促进了后来Node.js的诞生)越来越独立,内核倾向于只指渲染引擎.</p><ul><li>Chrome浏览器内核: 统称为Chromium内核或Chrome内核,以前是Webkit内核,现在是Blink内核</li><li>FireFox浏览器内核: Gecko内核</li><li>Opera浏览器内核: 最初是自己的Presto内核,后与Google一起研发内核,使用过Webkit内核,现在是Blink内核</li><li>Safari浏览器内核: Webkit内核</li><li>IE浏览器内核: Trident内核</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript是由Netscape Communications Corporation(网景公司)程序员Brendan Eich(布兰登.艾克)于1995年创造出来的.Eich只用了10天就开发出了这门脚本语言,最初命名为Mocha.&lt;/p&gt;
&lt;p&gt;1995年9月网
      
    
    </summary>
    
    
  </entry>
  
</feed>
